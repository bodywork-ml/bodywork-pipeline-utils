version: 2.1
jobs:
  run-static-code-analysis:
    docker:
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Installing Python dependencies
          command: pip install -r requirements_dev.txt
      - run:
          name: Running tests
          command: tox -e py38-static_code_analysis -- -s -vv
  run-unit-and-functional-tests:
    docker: 
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Installing Python dependencies
          command: pip install -r requirements_dev.txt
      - run: 
          name: Running tests
          command: tox -e py38-tests -- -s -vv --junitxml=~/tox/junit.xml
      - store_test_results:
          path: ~/tox/
      - run:
          name: Code Coverage upload
          command: bash <(curl -s https://codecov.io/bash)
  build-python-package-push-to-pypi:
    docker: 
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Installing Python dependencies
          command: pip install -r requirements_dev.txt
      - run:
          name: Building wheel
          command: python setup.py sdist bdist_wheel
      - run:
          name: Push to PyPI
          command: twine upload dist/* -u $PYPI_USERNAME -p $PYPI_PASSWORD --verbose
  create-and-push-new-git-tag:
    docker: 
      - image: circleci/python:3.8
    steps:
      - checkout
      - run:
          name: Tag Git repo.
          command: git tag v$(cat VERSION)
      - run:
          name: Git push tag.
          command: git push origin v$(cat VERSION)
  ensure-package-version-number-incremented:
    docker: 
      - image: circleci/python:3.8
    steps:
      - checkout
      - run: 
          name: Check that VERSION has been bumped
          command: |
            if [ ${CIRCLE_BRANCH} != "main" ]; then
              git clone --depth 1 --single-branch $CIRCLE_REPOSITORY_URL main-clone
              export VERSION_main=$(cat main-clone/VERSION)
              export VERSION_BRANCH=$(cat VERSION)
              if [ $VERSION_BRANCH == $VERSION_main ]; then
                echo "Version on branch '${CIRCLE_BRANCH}' (v${VERSION_BRANCH}) is the same as on 'main' - please bump version in VERSION file."
                exit 1
              else
                echo "Branch '${CIRCLE_BRANCH}' (v${VERSION_BRANCH}) has passed all tests and can be merged."
              fi
            else
              echo "Merging into main branch."
            fi

workflows:
  version: 2
  test-build-deploy:
    jobs:
      - ensure-package-version-number-incremented
      - run-static-code-analysis:
          requires:
            - ensure-package-version-number-incremented
          filters:
            branches:
              ignore: main
      - run-unit-and-functional-tests:
          requires:
            - run-static-code-analysis
          filters:
            branches:
              ignore: main
      - build-python-package-push-to-pypi:
          requires:
            - build-main-docker-image-push-to-dockerhub
          filters:
            branches:
              only: main
      - create-and-push-new-git-tag:
          requires:
            - build-python-package-push-to-pypi
          filters:
            branches:
              only: main
